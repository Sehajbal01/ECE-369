`timescale 1ns / 1ps

////////////////////////////////////////////////////////////////////////////////
// ECE369 - Computer Architecture
// 
// Module - ALU32Bit.v
// Description - 32-Bit wide arithmetic logic unit (ALU).
//
// INPUTS:-
// ALUControl: N-Bit input control bits to select an ALU operation.
// A: 32-Bit input port A.
// B: 32-Bit input port B.
//
// OUTPUTS:-
// ALUResult: 32-Bit ALU result output.
// ZERO: 1-Bit output flag. 
//
// FUNCTIONALITY:-
// Design a 32-Bit ALU, so that it supports all arithmetic operations 
// needed by the MIPS instructions given in Labs5-8.docx document. 
//   The 'ALUResult' will output the corresponding result of the operation 
//   based on the 32-Bit inputs, 'A', and 'B'. 
//   The 'Zero' flag is high when 'ALUResult' is '0'. 
//   The 'ALUControl' signal should determine the function of the ALU 
//   You need to determine the bitwidth of the ALUControl signal based on the number of 
//   operations needed to support. 
////////////////////////////////////////////////////////////////////////////////

module ALU32Bit(ALUControl, A, B, ALUResult, Zero);

	input [4:0] ALUControl; // control bits for ALU operation
                                // you need to adjust the bitwidth as needed
	input [31:0] A, B;	    // inputs

	output reg [31:0] ALUResult;	// answer
	output reg Zero;	    // Zero=1 if ALUResult == 0

    /*Anthony's Work is Below*/
always @(*) begin

    Zero = 0;

    case (ALUControl)
	//Arithmetic Operations First
    5'b00000: ALUResult = A + B;   // Add 
	5'b00001: ALUResult = A + B;   // Add Immediate 
	5'b00010: ALUResult = A - B;   // Subtract 
	5'b00011: ALUResult = A * B;   // Multiply 

	// Logical Operations next
	5'b00100: ALUResult = A & B;   // And 
	5'b00101: ALUResult = A & B;   // And immediate
	5'b00110: ALUResult = A | B;   // Or
	5'b00111: ALUResult = ~(A | B);   // Not or
	5'b01000: ALUResult = A ^ B;   // Exclusive or
	5'b01001: ALUResult = A | B;   // Or immediate
	5'b01010: ALUResult = A ^ B;   // Exclusive or Immediate 
	5'b01011: ALUResult = A << B;   // Shift left logical
	5'b01100: ALUResult = A >> B;   // Shift right logical
	5'b01101: ALUResult = (A < B) ? 1 : 0;   // Set on less than
	5'b01110: ALUResult = (A < B) ? 1 : 0;   // Set on less than 
	
	//branch operations
	5'b01111: Zero = (A == B); //beq
	5'b10000: Zero = ~(A == B); //bne
	5'b10001: Zero = (A > 0); //bgtz
	5'b10010: Zero = (A <= 0); //blez
	
	5'b10011: begin //BGEZ and BLTZ
	   case (B[0])
	       1'b0: Zero = (A < 0);
	       1'b1: Zero = (A >= 0);
	       default: Zero = 0;
	   endcase
	   end
	
	
	
	
	default: ALUResult = 32'b0; //default
    endcase

end


endmodule
